{"ast":null,"code":"/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\nvar shareSettings = {\n  share: true,\n  facebook: true,\n  facebookDropdownText: 'Facebook',\n  twitter: true,\n  twitterDropdownText: 'Twitter',\n  pinterest: true,\n  pinterestDropdownText: 'Pinterest',\n  additionalShareOptions: [],\n  sharePluginStrings: {\n    share: 'Share'\n  }\n};\nfunction getFacebookShareLink(galleryItem) {\n  var facebookBaseUrl = '//www.facebook.com/sharer/sharer.php?u=';\n  return facebookBaseUrl + encodeURIComponent(galleryItem.facebookShareUrl || window.location.href);\n}\nfunction getTwitterShareLink(galleryItem) {\n  var twitterBaseUrl = '//twitter.com/intent/tweet?text=';\n  var url = encodeURIComponent(galleryItem.twitterShareUrl || window.location.href);\n  var text = galleryItem.tweetText;\n  return twitterBaseUrl + text + '&url=' + url;\n}\nfunction getPinterestShareLink(galleryItem) {\n  var pinterestBaseUrl = 'http://www.pinterest.com/pin/create/button/?url=';\n  var description = galleryItem.pinterestText;\n  var media = encodeURIComponent(galleryItem.src);\n  var url = encodeURIComponent(galleryItem.pinterestShareUrl || window.location.href);\n  return pinterestBaseUrl + url + '&media=' + media + '&description=' + description;\n}\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\nvar lGEvents = {\n  afterAppendSlide: 'lgAfterAppendSlide',\n  init: 'lgInit',\n  hasVideo: 'lgHasVideo',\n  containerResize: 'lgContainerResize',\n  updateSlides: 'lgUpdateSlides',\n  afterAppendSubHtml: 'lgAfterAppendSubHtml',\n  beforeOpen: 'lgBeforeOpen',\n  afterOpen: 'lgAfterOpen',\n  slideItemLoad: 'lgSlideItemLoad',\n  beforeSlide: 'lgBeforeSlide',\n  afterSlide: 'lgAfterSlide',\n  posterClick: 'lgPosterClick',\n  dragStart: 'lgDragStart',\n  dragMove: 'lgDragMove',\n  dragEnd: 'lgDragEnd',\n  beforeNextSlide: 'lgBeforeNextSlide',\n  beforePrevSlide: 'lgBeforePrevSlide',\n  beforeClose: 'lgBeforeClose',\n  afterClose: 'lgAfterClose',\n  rotateLeft: 'lgRotateLeft',\n  rotateRight: 'lgRotateRight',\n  flipHorizontal: 'lgFlipHorizontal',\n  flipVertical: 'lgFlipVertical',\n  autoplay: 'lgAutoplay',\n  autoplayStart: 'lgAutoplayStart',\n  autoplayStop: 'lgAutoplayStop'\n};\nvar Share = /** @class */function () {\n  function Share(instance) {\n    this.shareOptions = [];\n    // get lightGallery core plugin instance\n    this.core = instance;\n    // extend module default settings with lightGallery core settings\n    this.settings = __assign(__assign({}, shareSettings), this.core.settings);\n    return this;\n  }\n  Share.prototype.init = function () {\n    if (!this.settings.share) {\n      return;\n    }\n    this.shareOptions = __spreadArrays(this.getDefaultShareOptions(), this.settings.additionalShareOptions);\n    this.setLgShareMarkup();\n    this.core.outer.find('.lg-share .lg-dropdown').append(this.getShareListHtml());\n    this.core.LGel.on(lGEvents.afterSlide + \".share\", this.onAfterSlide.bind(this));\n  };\n  Share.prototype.getShareListHtml = function () {\n    var shareHtml = '';\n    this.shareOptions.forEach(function (shareOption) {\n      shareHtml += shareOption.dropdownHTML;\n    });\n    return shareHtml;\n  };\n  Share.prototype.setLgShareMarkup = function () {\n    var _this = this;\n    this.core.$toolbar.append(\"<button type=\\\"button\\\" aria-label=\\\"\" + this.settings.sharePluginStrings['share'] + \"\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\" class=\\\"lg-share lg-icon\\\">\\n                <ul class=\\\"lg-dropdown\\\" style=\\\"position: absolute;\\\"></ul></button>\");\n    this.core.outer.append('<div class=\"lg-dropdown-overlay\"></div>');\n    var $shareButton = this.core.outer.find('.lg-share');\n    $shareButton.first().on('click.lg', function () {\n      _this.core.outer.toggleClass('lg-dropdown-active');\n      if (_this.core.outer.hasClass('lg-dropdown-active')) {\n        _this.core.outer.attr('aria-expanded', true);\n      } else {\n        _this.core.outer.attr('aria-expanded', false);\n      }\n    });\n    this.core.outer.find('.lg-dropdown-overlay').first().on('click.lg', function () {\n      _this.core.outer.removeClass('lg-dropdown-active');\n      _this.core.outer.attr('aria-expanded', false);\n    });\n  };\n  Share.prototype.onAfterSlide = function (event) {\n    var _this = this;\n    var index = event.detail.index;\n    var currentItem = this.core.galleryItems[index];\n    setTimeout(function () {\n      _this.shareOptions.forEach(function (shareOption) {\n        var selector = shareOption.selector;\n        _this.core.outer.find(selector).attr('href', shareOption.generateLink(currentItem));\n      });\n    }, 100);\n  };\n  Share.prototype.getShareListItemHTML = function (type, text) {\n    return \"<li><a class=\\\"lg-share-\" + type + \"\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\"><span class=\\\"lg-icon\\\"></span><span class=\\\"lg-dropdown-text\\\">\" + text + \"</span></a></li>\";\n  };\n  Share.prototype.getDefaultShareOptions = function () {\n    return __spreadArrays(this.settings.facebook ? [{\n      type: 'facebook',\n      generateLink: getFacebookShareLink,\n      dropdownHTML: this.getShareListItemHTML('facebook', this.settings.facebookDropdownText),\n      selector: '.lg-share-facebook'\n    }] : [], this.settings.twitter ? [{\n      type: 'twitter',\n      generateLink: getTwitterShareLink,\n      dropdownHTML: this.getShareListItemHTML('twitter', this.settings.twitterDropdownText),\n      selector: '.lg-share-twitter'\n    }] : [], this.settings.pinterest ? [{\n      type: 'pinterest',\n      generateLink: getPinterestShareLink,\n      dropdownHTML: this.getShareListItemHTML('pinterest', this.settings.pinterestDropdownText),\n      selector: '.lg-share-pinterest'\n    }] : []);\n  };\n  Share.prototype.destroy = function () {\n    this.core.outer.find('.lg-dropdown-overlay').remove();\n    this.core.outer.find('.lg-share').remove();\n    this.core.LGel.off('.lg.share');\n    this.core.LGel.off('.share');\n  };\n  return Share;\n}();\nexport default Share;","map":{"version":3,"names":["shareSettings","share","facebook","facebookDropdownText","twitter","twitterDropdownText","pinterest","pinterestDropdownText","additionalShareOptions","sharePluginStrings","getFacebookShareLink","galleryItem","facebookBaseUrl","encodeURIComponent","facebookShareUrl","window","location","href","getTwitterShareLink","twitterBaseUrl","url","twitterShareUrl","text","tweetText","getPinterestShareLink","pinterestBaseUrl","description","pinterestText","media","src","pinterestShareUrl","lGEvents","afterAppendSlide","init","hasVideo","containerResize","updateSlides","afterAppendSubHtml","beforeOpen","afterOpen","slideItemLoad","beforeSlide","afterSlide","posterClick","dragStart","dragMove","dragEnd","beforeNextSlide","beforePrevSlide","beforeClose","afterClose","rotateLeft","rotateRight","flipHorizontal","flipVertical","autoplay","autoplayStart","autoplayStop","Share","instance","shareOptions","core","settings","__assign","prototype","__spreadArrays","getDefaultShareOptions","setLgShareMarkup","outer","find","append","getShareListHtml","LGel","on","onAfterSlide","bind","shareHtml","forEach","shareOption","dropdownHTML","_this","$toolbar","$shareButton","first","toggleClass","hasClass","attr","removeClass","event","index","detail","currentItem","galleryItems","setTimeout","selector","generateLink","getShareListItemHTML","type","destroy","remove","off"],"sources":["D:\\tourism-management-system-main\\node_modules\\src\\plugins\\share\\lg-share-settings.ts","D:\\tourism-management-system-main\\node_modules\\src\\plugins\\share\\lg-fb-share-utils.ts","D:\\tourism-management-system-main\\node_modules\\src\\plugins\\share\\lg-twitter-share-utils.ts","D:\\tourism-management-system-main\\node_modules\\src\\plugins\\share\\lg-pinterest-share-utils.ts","D:\\tourism-management-system-main\\node_modules\\src\\lg-events.ts","D:\\tourism-management-system-main\\node_modules\\src\\plugins\\share\\lg-share.ts"],"sourcesContent":["import { ShareOption } from './types';\n\nexport interface ShareStrings {\n    share: string;\n}\n\nexport interface ShareSettings {\n    /**\n     * Enable/Disable share options\n     */\n    share: boolean;\n\n    /**\n     * Enable Facebook share.\n     */\n    facebook: boolean;\n\n    /**\n     * Facebook dropdown text.\n     */\n    facebookDropdownText: string;\n\n    /**\n     * Enable twitter share.\n     */\n    twitter: boolean;\n\n    /**\n     * Twitter dropdown text\n     */\n    twitterDropdownText: string;\n\n    /**\n     * Enable pinterest share.\n     */\n    pinterest: boolean;\n\n    /**\n     * Pinterest dropdown text\n\n     */\n    pinterestDropdownText: string;\n\n    /**\n     * Array of additional share options\n     *\n     * This can be used to build additional share options.\n     * <a href=\"/demos/share/\">Demo</a>\n     */\n    additionalShareOptions: ShareOption[];\n\n    /**\n     * Custom translation strings for aria-labels\n     */\n    sharePluginStrings: ShareStrings;\n}\n\nexport const shareSettings = {\n    share: true,\n    facebook: true,\n    facebookDropdownText: 'Facebook',\n    twitter: true,\n    twitterDropdownText: 'Twitter',\n    pinterest: true,\n    pinterestDropdownText: 'Pinterest',\n    additionalShareOptions: [],\n    sharePluginStrings: { share: 'Share' } as ShareStrings,\n};\n","import { GalleryItem } from '../../lg-utils';\n\nexport function getFacebookShareLink(galleryItem: GalleryItem): string {\n    const facebookBaseUrl = '//www.facebook.com/sharer/sharer.php?u=';\n    return (\n        facebookBaseUrl +\n        encodeURIComponent(galleryItem.facebookShareUrl || window.location.href)\n    );\n}\n","import { GalleryItem } from '../../lg-utils';\n\nexport function getTwitterShareLink(galleryItem: GalleryItem): string {\n    const twitterBaseUrl = '//twitter.com/intent/tweet?text=';\n    const url = encodeURIComponent(\n        galleryItem.twitterShareUrl || window.location.href,\n    );\n    const text = galleryItem.tweetText;\n    return twitterBaseUrl + text + '&url=' + url;\n}\n","import { GalleryItem } from '../../lg-utils';\n\nexport function getPinterestShareLink(galleryItem: GalleryItem): string {\n    const pinterestBaseUrl = 'http://www.pinterest.com/pin/create/button/?url=';\n    const description = galleryItem.pinterestText;\n    const media = encodeURIComponent(galleryItem.src as string);\n    const url = encodeURIComponent(\n        galleryItem.pinterestShareUrl || window.location.href,\n    );\n    return (\n        pinterestBaseUrl +\n        url +\n        '&media=' +\n        media +\n        '&description=' +\n        description\n    );\n}\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n","import { ShareSettings, shareSettings } from './lg-share-settings';\n\nimport { getFacebookShareLink } from './lg-fb-share-utils';\nimport { getTwitterShareLink } from './lg-twitter-share-utils';\nimport { getPinterestShareLink } from './lg-pinterest-share-utils';\nimport { LightGallery } from '../../lightgallery';\nimport { lGEvents } from '../../lg-events';\nimport { ShareOption } from './types';\n\ninterface DefaultShareOptions extends ShareOption {\n    type: string;\n}\nexport default class Share {\n    core: LightGallery;\n    settings: ShareSettings;\n    private shareOptions: ShareOption[] = [];\n    constructor(instance: LightGallery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n\n        // extend module default settings with lightGallery core settings\n        this.settings = { ...shareSettings, ...this.core.settings };\n        return this;\n    }\n\n    public init(): void {\n        if (!this.settings.share) {\n            return;\n        }\n        this.shareOptions = [\n            ...this.getDefaultShareOptions(),\n            ...this.settings.additionalShareOptions,\n        ];\n        this.setLgShareMarkup();\n        this.core.outer\n            .find('.lg-share .lg-dropdown')\n            .append(this.getShareListHtml());\n\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.share`,\n            this.onAfterSlide.bind(this),\n        );\n    }\n\n    private getShareListHtml() {\n        let shareHtml = '';\n        this.shareOptions.forEach((shareOption) => {\n            shareHtml += shareOption.dropdownHTML;\n        });\n\n        return shareHtml;\n    }\n\n    setLgShareMarkup(): void {\n        this.core.$toolbar.append(\n            `<button type=\"button\" aria-label=\"${this.settings.sharePluginStrings['share']}\" aria-haspopup=\"true\" aria-expanded=\"false\" class=\"lg-share lg-icon\">\n                <ul class=\"lg-dropdown\" style=\"position: absolute;\"></ul></button>`,\n        );\n\n        this.core.outer.append('<div class=\"lg-dropdown-overlay\"></div>');\n        const $shareButton = this.core.outer.find('.lg-share');\n        $shareButton.first().on('click.lg', () => {\n            this.core.outer.toggleClass('lg-dropdown-active');\n            if (this.core.outer.hasClass('lg-dropdown-active')) {\n                this.core.outer.attr('aria-expanded', true);\n            } else {\n                this.core.outer.attr('aria-expanded', false);\n            }\n        });\n\n        this.core.outer\n            .find('.lg-dropdown-overlay')\n            .first()\n            .on('click.lg', () => {\n                this.core.outer.removeClass('lg-dropdown-active');\n                this.core.outer.attr('aria-expanded', false);\n            });\n    }\n\n    private onAfterSlide(event: CustomEvent) {\n        const { index } = event.detail;\n        const currentItem = this.core.galleryItems[index];\n        setTimeout(() => {\n            this.shareOptions.forEach((shareOption) => {\n                const selector = shareOption.selector;\n                this.core.outer\n                    .find(selector)\n                    .attr('href', shareOption.generateLink(currentItem));\n            });\n        }, 100);\n    }\n\n    private getShareListItemHTML(type: string, text: string): string {\n        return `<li><a class=\"lg-share-${type}\" rel=\"noopener\" target=\"_blank\"><span class=\"lg-icon\"></span><span class=\"lg-dropdown-text\">${text}</span></a></li>`;\n    }\n\n    private getDefaultShareOptions(): DefaultShareOptions[] {\n        return [\n            ...(this.settings.facebook\n                ? [\n                      {\n                          type: 'facebook',\n                          generateLink: getFacebookShareLink,\n                          dropdownHTML: this.getShareListItemHTML(\n                              'facebook',\n                              this.settings.facebookDropdownText,\n                          ),\n                          selector: '.lg-share-facebook',\n                      },\n                  ]\n                : []),\n            ...(this.settings.twitter\n                ? [\n                      {\n                          type: 'twitter',\n                          generateLink: getTwitterShareLink,\n                          dropdownHTML: this.getShareListItemHTML(\n                              'twitter',\n                              this.settings.twitterDropdownText,\n                          ),\n                          selector: '.lg-share-twitter',\n                      },\n                  ]\n                : []),\n            ...(this.settings.pinterest\n                ? [\n                      {\n                          type: 'pinterest',\n                          generateLink: getPinterestShareLink,\n                          dropdownHTML: this.getShareListItemHTML(\n                              'pinterest',\n                              this.settings.pinterestDropdownText,\n                          ),\n                          selector: '.lg-share-pinterest',\n                      },\n                  ]\n                : []),\n        ];\n    }\n\n    public destroy(): void {\n        this.core.outer.find('.lg-dropdown-overlay').remove();\n        this.core.outer.find('.lg-share').remove();\n        this.core.LGel.off('.lg.share');\n        this.core.LGel.off('.share');\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}