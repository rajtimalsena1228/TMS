{"ast":null,"code":"/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\nvar lGEvents = {\n  afterAppendSlide: 'lgAfterAppendSlide',\n  init: 'lgInit',\n  hasVideo: 'lgHasVideo',\n  containerResize: 'lgContainerResize',\n  updateSlides: 'lgUpdateSlides',\n  afterAppendSubHtml: 'lgAfterAppendSubHtml',\n  beforeOpen: 'lgBeforeOpen',\n  afterOpen: 'lgAfterOpen',\n  slideItemLoad: 'lgSlideItemLoad',\n  beforeSlide: 'lgBeforeSlide',\n  afterSlide: 'lgAfterSlide',\n  posterClick: 'lgPosterClick',\n  dragStart: 'lgDragStart',\n  dragMove: 'lgDragMove',\n  dragEnd: 'lgDragEnd',\n  beforeNextSlide: 'lgBeforeNextSlide',\n  beforePrevSlide: 'lgBeforePrevSlide',\n  beforeClose: 'lgBeforeClose',\n  afterClose: 'lgAfterClose',\n  rotateLeft: 'lgRotateLeft',\n  rotateRight: 'lgRotateRight',\n  flipHorizontal: 'lgFlipHorizontal',\n  flipVertical: 'lgFlipVertical',\n  autoplay: 'lgAutoplay',\n  autoplayStart: 'lgAutoplayStart',\n  autoplayStop: 'lgAutoplayStop'\n};\nvar rotateSettings = {\n  rotate: true,\n  rotateSpeed: 400,\n  rotateLeft: true,\n  rotateRight: true,\n  flipHorizontal: true,\n  flipVertical: true,\n  rotatePluginStrings: {\n    flipVertical: 'Flip vertical',\n    flipHorizontal: 'Flip horizontal',\n    rotateLeft: 'Rotate left',\n    rotateRight: 'Rotate right'\n  }\n};\nvar Rotate = /** @class */function () {\n  function Rotate(instance, $LG) {\n    // get lightGallery core plugin instance\n    this.core = instance;\n    this.$LG = $LG;\n    // extend module default settings with lightGallery core settings\n    this.settings = __assign(__assign({}, rotateSettings), this.core.settings);\n    return this;\n  }\n  Rotate.prototype.buildTemplates = function () {\n    var rotateIcons = '';\n    if (this.settings.flipVertical) {\n      rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-flip-ver\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['flipVertical'] + \"\\\" class=\\\"lg-flip-ver lg-icon\\\"></button>\";\n    }\n    if (this.settings.flipHorizontal) {\n      rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-flip-hor\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['flipHorizontal'] + \"\\\" class=\\\"lg-flip-hor lg-icon\\\"></button>\";\n    }\n    if (this.settings.rotateLeft) {\n      rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-rotate-left\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['rotateLeft'] + \"\\\" class=\\\"lg-rotate-left lg-icon\\\"></button>\";\n    }\n    if (this.settings.rotateRight) {\n      rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-rotate-right\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['rotateRight'] + \"\\\" class=\\\"lg-rotate-right lg-icon\\\"></button>\";\n    }\n    this.core.$toolbar.append(rotateIcons);\n  };\n  Rotate.prototype.init = function () {\n    var _this = this;\n    if (!this.settings.rotate) {\n      return;\n    }\n    this.buildTemplates();\n    // Save rotate config for each item to persist its rotate, flip values\n    // even after navigating to diferent slides\n    this.rotateValuesList = {};\n    // event triggered after appending slide content\n    this.core.LGel.on(lGEvents.slideItemLoad + \".rotate\", function (event) {\n      var index = event.detail.index;\n      var rotateEl = _this.core.getSlideItem(index).find('.lg-img-rotate').get();\n      if (!rotateEl) {\n        var imageWrap = _this.core.getSlideItem(index).find('.lg-object').first();\n        imageWrap.wrap('lg-img-rotate');\n        //this.rotateValuesList[this.core.index]\n        _this.core.getSlideItem(_this.core.index).find('.lg-img-rotate').css('transition-duration', _this.settings.rotateSpeed + 'ms');\n      }\n    });\n    this.core.outer.find('#lg-rotate-left').first().on('click.lg', this.rotateLeft.bind(this));\n    this.core.outer.find('#lg-rotate-right').first().on('click.lg', this.rotateRight.bind(this));\n    this.core.outer.find('#lg-flip-hor').first().on('click.lg', this.flipHorizontal.bind(this));\n    this.core.outer.find('#lg-flip-ver').first().on('click.lg', this.flipVertical.bind(this));\n    // Reset rotate on slide change\n    this.core.LGel.on(lGEvents.beforeSlide + \".rotate\", function (event) {\n      if (!_this.rotateValuesList[event.detail.index]) {\n        _this.rotateValuesList[event.detail.index] = {\n          rotate: 0,\n          flipHorizontal: 1,\n          flipVertical: 1\n        };\n      }\n    });\n  };\n  Rotate.prototype.applyStyles = function () {\n    var $image = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first();\n    $image.css('transform', 'rotate(' + this.rotateValuesList[this.core.index].rotate + 'deg)' + ' scale3d(' + this.rotateValuesList[this.core.index].flipHorizontal + ', ' + this.rotateValuesList[this.core.index].flipVertical + ', 1)');\n  };\n  Rotate.prototype.rotateLeft = function () {\n    this.rotateValuesList[this.core.index].rotate -= 90;\n    this.applyStyles();\n    this.triggerEvents(lGEvents.rotateLeft, {\n      rotate: this.rotateValuesList[this.core.index].rotate\n    });\n  };\n  Rotate.prototype.rotateRight = function () {\n    this.rotateValuesList[this.core.index].rotate += 90;\n    this.applyStyles();\n    this.triggerEvents(lGEvents.rotateRight, {\n      rotate: this.rotateValuesList[this.core.index].rotate\n    });\n  };\n  Rotate.prototype.getCurrentRotation = function (el) {\n    if (!el) {\n      return 0;\n    }\n    var st = this.$LG(el).style();\n    var tm = st.getPropertyValue('-webkit-transform') || st.getPropertyValue('-moz-transform') || st.getPropertyValue('-ms-transform') || st.getPropertyValue('-o-transform') || st.getPropertyValue('transform') || 'none';\n    if (tm !== 'none') {\n      var values = tm.split('(')[1].split(')')[0].split(',');\n      if (values) {\n        var angle = Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));\n        return angle < 0 ? angle + 360 : angle;\n      }\n    }\n    return 0;\n  };\n  Rotate.prototype.flipHorizontal = function () {\n    var rotateEl = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first().get();\n    var currentRotation = this.getCurrentRotation(rotateEl);\n    var rotateAxis = 'flipHorizontal';\n    if (currentRotation === 90 || currentRotation === 270) {\n      rotateAxis = 'flipVertical';\n    }\n    this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n    this.applyStyles();\n    this.triggerEvents(lGEvents.flipHorizontal, {\n      flipHorizontal: this.rotateValuesList[this.core.index][rotateAxis]\n    });\n  };\n  Rotate.prototype.flipVertical = function () {\n    var rotateEl = this.core.getSlideItem(this.core.index).find('.lg-img-rotate').first().get();\n    var currentRotation = this.getCurrentRotation(rotateEl);\n    var rotateAxis = 'flipVertical';\n    if (currentRotation === 90 || currentRotation === 270) {\n      rotateAxis = 'flipHorizontal';\n    }\n    this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n    this.applyStyles();\n    this.triggerEvents(lGEvents.flipVertical, {\n      flipVertical: this.rotateValuesList[this.core.index][rotateAxis]\n    });\n  };\n  Rotate.prototype.triggerEvents = function (event, detail) {\n    var _this = this;\n    setTimeout(function () {\n      _this.core.LGel.trigger(event, detail);\n    }, this.settings.rotateSpeed + 10);\n  };\n  Rotate.prototype.isImageOrientationChanged = function () {\n    var rotateValue = this.rotateValuesList[this.core.index];\n    var isRotated = Math.abs(rotateValue.rotate) % 360 !== 0;\n    var ifFlippedHor = rotateValue.flipHorizontal < 0;\n    var ifFlippedVer = rotateValue.flipVertical < 0;\n    return isRotated || ifFlippedHor || ifFlippedVer;\n  };\n  Rotate.prototype.closeGallery = function () {\n    if (this.isImageOrientationChanged()) {\n      this.core.getSlideItem(this.core.index).css('opacity', 0);\n    }\n    this.rotateValuesList = {};\n  };\n  Rotate.prototype.destroy = function () {\n    // Unbind all events added by lightGallery rotate plugin\n    this.core.LGel.off('.lg.rotate');\n    this.core.LGel.off('.rotate');\n  };\n  return Rotate;\n}();\nexport default Rotate;","map":{"version":3,"names":["lGEvents","afterAppendSlide","init","hasVideo","containerResize","updateSlides","afterAppendSubHtml","beforeOpen","afterOpen","slideItemLoad","beforeSlide","afterSlide","posterClick","dragStart","dragMove","dragEnd","beforeNextSlide","beforePrevSlide","beforeClose","afterClose","rotateLeft","rotateRight","flipHorizontal","flipVertical","autoplay","autoplayStart","autoplayStop","rotateSettings","rotate","rotateSpeed","rotatePluginStrings","Rotate","instance","$LG","core","settings","__assign","prototype","buildTemplates","rotateIcons","$toolbar","append","_this","rotateValuesList","LGel","on","event","index","detail","rotateEl","getSlideItem","find","get","imageWrap","first","wrap","css","outer","bind","applyStyles","$image","triggerEvents","getCurrentRotation","el","st","style","tm","getPropertyValue","values","split","angle","Math","round","atan2","PI","currentRotation","rotateAxis","setTimeout","trigger","isImageOrientationChanged","rotateValue","isRotated","abs","ifFlippedHor","ifFlippedVer","closeGallery","destroy","off"],"sources":["D:\\tourism-management-system-main\\node_modules\\src\\lg-events.ts","D:\\tourism-management-system-main\\node_modules\\src\\plugins\\rotate\\lg-rotate-settings.ts","D:\\tourism-management-system-main\\node_modules\\src\\plugins\\rotate\\lg-rotate.ts"],"sourcesContent":["import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n","export interface RotateStrings {\n    flipVertical: string;\n    flipHorizontal: string;\n    rotateLeft: string;\n    rotateRight: string;\n}\n\nexport interface RotateSettings {\n    /**\n     * Enable/Disable rotate option\n     */\n    rotate: boolean;\n\n    /**\n     * Rotate speed in milliseconds\n     */\n    rotateSpeed: number;\n\n    /**\n     * Enable rotate left.\n     */\n    rotateLeft: boolean;\n\n    /**\n     * Enable rotate right.\n     */\n    rotateRight: boolean;\n\n    /**\n     * Enable flip horizontal.\n     */\n    flipHorizontal: boolean;\n\n    /**\n     * Enable flip vertical.\n     */\n    flipVertical: boolean;\n\n    /**\n     * Custom translation strings for aria-labels\n     */\n    rotatePluginStrings: RotateStrings;\n}\nexport const rotateSettings = {\n    rotate: true,\n    rotateSpeed: 400,\n    rotateLeft: true,\n    rotateRight: true,\n    flipHorizontal: true,\n    flipVertical: true,\n    rotatePluginStrings: {\n        flipVertical: 'Flip vertical',\n        flipHorizontal: 'Flip horizontal',\n        rotateLeft: 'Rotate left',\n        rotateRight: 'Rotate right',\n    } as RotateStrings,\n};\n","import { lGEvents } from '../../lg-events';\nimport { LgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { rotateSettings, RotateSettings } from './lg-rotate-settings';\n\nexport default class Rotate {\n    core: LightGallery;\n    settings: RotateSettings;\n    rotateValuesList!: {\n        [key: string]: any;\n    };\n    private $LG!: LgQuery;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        // extend module default settings with lightGallery core settings\n        this.settings = {\n            ...rotateSettings,\n            ...this.core.settings,\n        };\n\n        return this;\n    }\n    buildTemplates(): void {\n        let rotateIcons = '';\n        if (this.settings.flipVertical) {\n            rotateIcons += `<button type=\"button\" id=\"lg-flip-ver\" aria-label=\"${this.settings.rotatePluginStrings['flipVertical']}\" class=\"lg-flip-ver lg-icon\"></button>`;\n        }\n        if (this.settings.flipHorizontal) {\n            rotateIcons += `<button type=\"button\" id=\"lg-flip-hor\" aria-label=\"${this.settings.rotatePluginStrings['flipHorizontal']}\" class=\"lg-flip-hor lg-icon\"></button>`;\n        }\n        if (this.settings.rotateLeft) {\n            rotateIcons += `<button type=\"button\" id=\"lg-rotate-left\" aria-label=\"${this.settings.rotatePluginStrings['rotateLeft']}\" class=\"lg-rotate-left lg-icon\"></button>`;\n        }\n        if (this.settings.rotateRight) {\n            rotateIcons += `<button type=\"button\" id=\"lg-rotate-right\" aria-label=\"${this.settings.rotatePluginStrings['rotateRight']}\" class=\"lg-rotate-right lg-icon\"></button>`;\n        }\n        this.core.$toolbar.append(rotateIcons);\n    }\n\n    init(): void {\n        if (!this.settings.rotate) {\n            return;\n        }\n        this.buildTemplates();\n\n        // Save rotate config for each item to persist its rotate, flip values\n        // even after navigating to diferent slides\n        this.rotateValuesList = {};\n\n        // event triggered after appending slide content\n        this.core.LGel.on(`${lGEvents.slideItemLoad}.rotate`, (event) => {\n            const { index } = event.detail;\n\n            const rotateEl = this.core\n                .getSlideItem(index)\n                .find('.lg-img-rotate')\n                .get();\n            if (!rotateEl) {\n                const imageWrap = this.core\n                    .getSlideItem(index)\n                    .find('.lg-object')\n                    .first();\n\n                imageWrap.wrap('lg-img-rotate');\n                //this.rotateValuesList[this.core.index]\n                this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-rotate')\n                    .css(\n                        'transition-duration',\n                        this.settings.rotateSpeed + 'ms',\n                    );\n            }\n        });\n\n        this.core.outer\n            .find('#lg-rotate-left')\n            .first()\n            .on('click.lg', this.rotateLeft.bind(this));\n\n        this.core.outer\n            .find('#lg-rotate-right')\n            .first()\n            .on('click.lg', this.rotateRight.bind(this));\n\n        this.core.outer\n            .find('#lg-flip-hor')\n            .first()\n            .on('click.lg', this.flipHorizontal.bind(this));\n\n        this.core.outer\n            .find('#lg-flip-ver')\n            .first()\n            .on('click.lg', this.flipVertical.bind(this));\n\n        // Reset rotate on slide change\n        this.core.LGel.on(`${lGEvents.beforeSlide}.rotate`, (event) => {\n            if (!this.rotateValuesList[event.detail.index]) {\n                this.rotateValuesList[event.detail.index] = {\n                    rotate: 0,\n                    flipHorizontal: 1,\n                    flipVertical: 1,\n                };\n            }\n        });\n    }\n\n    applyStyles(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first();\n\n        $image.css(\n            'transform',\n            'rotate(' +\n                this.rotateValuesList[this.core.index].rotate +\n                'deg)' +\n                ' scale3d(' +\n                this.rotateValuesList[this.core.index].flipHorizontal +\n                ', ' +\n                this.rotateValuesList[this.core.index].flipVertical +\n                ', 1)',\n        );\n    }\n\n    rotateLeft(): void {\n        this.rotateValuesList[this.core.index].rotate -= 90;\n        this.applyStyles();\n        this.triggerEvents(lGEvents.rotateLeft, {\n            rotate: this.rotateValuesList[this.core.index].rotate,\n        });\n    }\n\n    rotateRight(): void {\n        this.rotateValuesList[this.core.index].rotate += 90;\n        this.applyStyles();\n        this.triggerEvents(lGEvents.rotateRight, {\n            rotate: this.rotateValuesList[this.core.index].rotate,\n        });\n    }\n\n    getCurrentRotation(el: HTMLElement): number {\n        if (!el) {\n            return 0;\n        }\n        const st = this.$LG(el).style();\n        const tm =\n            st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            const values = tm.split('(')[1].split(')')[0].split(',') as any;\n            if (values) {\n                const angle = Math.round(\n                    Math.atan2(values[1], values[0]) * (180 / Math.PI),\n                );\n                return angle < 0 ? angle + 360 : angle;\n            }\n        }\n        return 0;\n    }\n\n    flipHorizontal(): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        const currentRotation = this.getCurrentRotation(rotateEl);\n        let rotateAxis = 'flipHorizontal';\n        if (currentRotation === 90 || currentRotation === 270) {\n            rotateAxis = 'flipVertical';\n        }\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n        this.applyStyles();\n        this.triggerEvents(lGEvents.flipHorizontal, {\n            flipHorizontal: this.rotateValuesList[this.core.index][rotateAxis],\n        });\n    }\n\n    flipVertical(): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        const currentRotation = this.getCurrentRotation(rotateEl);\n        let rotateAxis = 'flipVertical';\n        if (currentRotation === 90 || currentRotation === 270) {\n            rotateAxis = 'flipHorizontal';\n        }\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n\n        this.applyStyles();\n\n        this.triggerEvents(lGEvents.flipVertical, {\n            flipVertical: this.rotateValuesList[this.core.index][rotateAxis],\n        });\n    }\n\n    triggerEvents(event: string, detail: any): void {\n        setTimeout(() => {\n            this.core.LGel.trigger(event, detail);\n        }, this.settings.rotateSpeed + 10);\n    }\n\n    isImageOrientationChanged(): boolean {\n        const rotateValue = this.rotateValuesList[this.core.index];\n        const isRotated = Math.abs(rotateValue.rotate) % 360 !== 0;\n        const ifFlippedHor = rotateValue.flipHorizontal < 0;\n        const ifFlippedVer = rotateValue.flipVertical < 0;\n        return isRotated || ifFlippedHor || ifFlippedVer;\n    }\n\n    closeGallery(): void {\n        if (this.isImageOrientationChanged()) {\n            this.core.getSlideItem(this.core.index).css('opacity', 0);\n        }\n        this.rotateValuesList = {};\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery rotate plugin\n        this.core.LGel.off('.lg.rotate');\n        this.core.LGel.off('.rotate');\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;AAKO,IAAMA,QAAQ,GAEjB;EACAC,gBAAgB,EAAE,oBAAoB;EACtCC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,YAAY;EACtBC,eAAe,EAAE,mBAAmB;EACpCC,YAAY,EAAE,gBAAgB;EAC9BC,kBAAkB,EAAE,sBAAsB;EAC1CC,UAAU,EAAE,cAAc;EAC1BC,SAAS,EAAE,aAAa;EACxBC,aAAa,EAAE,iBAAiB;EAChCC,WAAW,EAAE,eAAe;EAC5BC,UAAU,EAAE,cAAc;EAC1BC,WAAW,EAAE,eAAe;EAC5BC,SAAS,EAAE,aAAa;EACxBC,QAAQ,EAAE,YAAY;EACtBC,OAAO,EAAE,WAAW;EACpBC,eAAe,EAAE,mBAAmB;EACpCC,eAAe,EAAE,mBAAmB;EACpCC,WAAW,EAAE,eAAe;EAC5BC,UAAU,EAAE,cAAc;EAC1BC,UAAU,EAAE,cAAc;EAC1BC,WAAW,EAAE,eAAe;EAC5BC,cAAc,EAAE,kBAAkB;EAClCC,YAAY,EAAE,gBAAgB;EAC9BC,QAAQ,EAAE,YAAY;EACtBC,aAAa,EAAE,iBAAiB;EAChCC,YAAY,EAAE;CACjB;ACMM,IAAMC,cAAc,GAAG;EAC1BC,MAAM,EAAE,IAAI;EACZC,WAAW,EAAE,GAAG;EAChBT,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,IAAI;EACjBC,cAAc,EAAE,IAAI;EACpBC,YAAY,EAAE,IAAI;EAClBO,mBAAmB,EAAE;IACjBP,YAAY,EAAE,eAAe;IAC7BD,cAAc,EAAE,iBAAiB;IACjCF,UAAU,EAAE,aAAa;IACzBC,WAAW,EAAE;;CAEpB;;EC5CG,SAAAU,OAAYC,QAAsB,EAAEC,GAAY;;IAE5C,IAAI,CAACC,IAAI,GAAGF,QAAQ;IACpB,IAAI,CAACC,GAAG,GAAGA,GAAG;;IAGd,IAAI,CAACE,QAAQ,GAAAC,QAAA,CAAAA,QAAA,KACNT,cAAc,GACd,IAAI,CAACO,IAAI,CAACC,QAAQ,CACxB;IAED,OAAO,IAAI;;EAEfJ,MAAA,CAAAM,SAAA,CAAAC,cAAc,GAAd;IACI,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAI,IAAI,CAACJ,QAAQ,CAACZ,YAAY,EAAE;MAC5BgB,WAAW,IAAI,6DAAsD,IAAI,CAACJ,QAAQ,CAACL,mBAAmB,CAAC,cAAc,CAAC,+CAAyC;;IAEnK,IAAI,IAAI,CAACK,QAAQ,CAACb,cAAc,EAAE;MAC9BiB,WAAW,IAAI,6DAAsD,IAAI,CAACJ,QAAQ,CAACL,mBAAmB,CAAC,gBAAgB,CAAC,+CAAyC;;IAErK,IAAI,IAAI,CAACK,QAAQ,CAACf,UAAU,EAAE;MAC1BmB,WAAW,IAAI,gEAAyD,IAAI,CAACJ,QAAQ,CAACL,mBAAmB,CAAC,YAAY,CAAC,kDAA4C;;IAEvK,IAAI,IAAI,CAACK,QAAQ,CAACd,WAAW,EAAE;MAC3BkB,WAAW,IAAI,iEAA0D,IAAI,CAACJ,QAAQ,CAACL,mBAAmB,CAAC,aAAa,CAAC,mDAA6C;;IAE1K,IAAI,CAACI,IAAI,CAACM,QAAQ,CAACC,MAAM,CAACF,WAAW,CAAC;GACzC;EAEDR,MAAA,CAAAM,SAAA,CAAAnC,IAAI,GAAJ;IAAA,IAAAwC,KAAA;IACI,IAAI,CAAC,IAAI,CAACP,QAAQ,CAACP,MAAM,EAAE;MACvB;;IAEJ,IAAI,CAACU,cAAc,EAAE;;;IAIrB,IAAI,CAACK,gBAAgB,GAAG,EAAE;;IAG1B,IAAI,CAACT,IAAI,CAACU,IAAI,CAACC,EAAE,CAAI7C,QAAQ,CAACS,aAAa,YAAS,EAAE,UAACqC,KAAK;MAChD,IAAAC,KAAK,GAAKD,KAAK,CAACE,MAAM,CAAAD,KAAjB;MAEb,IAAME,QAAQ,GAAGP,KAAI,CAACR,IAAI,CACrBgB,YAAY,CAACH,KAAK,CAAC,CACnBI,IAAI,CAAC,gBAAgB,CAAC,CACtBC,GAAG,EAAE;MACV,IAAI,CAACH,QAAQ,EAAE;QACX,IAAMI,SAAS,GAAGX,KAAI,CAACR,IAAI,CACtBgB,YAAY,CAACH,KAAK,CAAC,CACnBI,IAAI,CAAC,YAAY,CAAC,CAClBG,KAAK,EAAE;QAEZD,SAAS,CAACE,IAAI,CAAC,eAAe,CAAC;;QAE/Bb,KAAI,CAACR,IAAI,CACJgB,YAAY,CAACR,KAAI,CAACR,IAAI,CAACa,KAAK,CAAC,CAC7BI,IAAI,CAAC,gBAAgB,CAAC,CACtBK,GAAG,CACA,qBAAqB,EACrBd,KAAI,CAACP,QAAQ,CAACN,WAAW,GAAG,IAAI,CACnC;;KAEZ,CAAC;IAEF,IAAI,CAACK,IAAI,CAACuB,KAAK,CACVN,IAAI,CAAC,iBAAiB,CAAC,CACvBG,KAAK,EAAE,CACPT,EAAE,CAAC,UAAU,EAAE,IAAI,CAACzB,UAAU,CAACsC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE/C,IAAI,CAACxB,IAAI,CAACuB,KAAK,CACVN,IAAI,CAAC,kBAAkB,CAAC,CACxBG,KAAK,EAAE,CACPT,EAAE,CAAC,UAAU,EAAE,IAAI,CAACxB,WAAW,CAACqC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEhD,IAAI,CAACxB,IAAI,CAACuB,KAAK,CACVN,IAAI,CAAC,cAAc,CAAC,CACpBG,KAAK,EAAE,CACPT,EAAE,CAAC,UAAU,EAAE,IAAI,CAACvB,cAAc,CAACoC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEnD,IAAI,CAACxB,IAAI,CAACuB,KAAK,CACVN,IAAI,CAAC,cAAc,CAAC,CACpBG,KAAK,EAAE,CACPT,EAAE,CAAC,UAAU,EAAE,IAAI,CAACtB,YAAY,CAACmC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAGjD,IAAI,CAACxB,IAAI,CAACU,IAAI,CAACC,EAAE,CAAI7C,QAAQ,CAACU,WAAW,YAAS,EAAE,UAACoC,KAAK;MACtD,IAAI,CAACJ,KAAI,CAACC,gBAAgB,CAACG,KAAK,CAACE,MAAM,CAACD,KAAK,CAAC,EAAE;QAC5CL,KAAI,CAACC,gBAAgB,CAACG,KAAK,CAACE,MAAM,CAACD,KAAK,CAAC,GAAG;UACxCnB,MAAM,EAAE,CAAC;UACTN,cAAc,EAAE,CAAC;UACjBC,YAAY,EAAE;SACjB;;KAER,CAAC;GACL;EAEDQ,MAAA,CAAAM,SAAA,CAAAsB,WAAW,GAAX;IACI,IAAMC,MAAM,GAAG,IAAI,CAAC1B,IAAI,CACnBgB,YAAY,CAAC,IAAI,CAAChB,IAAI,CAACa,KAAK,CAAC,CAC7BI,IAAI,CAAC,gBAAgB,CAAC,CACtBG,KAAK,EAAE;IAEZM,MAAM,CAACJ,GAAG,CACN,WAAW,EACX,SAAS,GACL,IAAI,CAACb,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACnB,MAAM,GAC7C,MAAM,GACN,WAAW,GACX,IAAI,CAACe,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACzB,cAAc,GACrD,IAAI,GACJ,IAAI,CAACqB,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACxB,YAAY,GACnD,MAAM,CACb;GACJ;EAEDQ,MAAA,CAAAM,SAAA,CAAAjB,UAAU,GAAV;IACI,IAAI,CAACuB,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACnB,MAAM,IAAI,EAAE;IACnD,IAAI,CAAC+B,WAAW,EAAE;IAClB,IAAI,CAACE,aAAa,CAAC7D,QAAQ,CAACoB,UAAU,EAAE;MACpCQ,MAAM,EAAE,IAAI,CAACe,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACnB;KAClD,CAAC;GACL;EAEDG,MAAA,CAAAM,SAAA,CAAAhB,WAAW,GAAX;IACI,IAAI,CAACsB,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACnB,MAAM,IAAI,EAAE;IACnD,IAAI,CAAC+B,WAAW,EAAE;IAClB,IAAI,CAACE,aAAa,CAAC7D,QAAQ,CAACqB,WAAW,EAAE;MACrCO,MAAM,EAAE,IAAI,CAACe,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAACnB;KAClD,CAAC;GACL;EAEDG,MAAA,CAAAM,SAAA,CAAAyB,kBAAkB,GAAlB,UAAmBC,EAAe;IAC9B,IAAI,CAACA,EAAE,EAAE;MACL,OAAO,CAAC;;IAEZ,IAAMC,EAAE,GAAG,IAAI,CAAC/B,GAAG,CAAC8B,EAAE,CAAC,CAACE,KAAK,EAAE;IAC/B,IAAMC,EAAE,GACJF,EAAE,CAACG,gBAAgB,CAAC,mBAAmB,CAAC,IACxCH,EAAE,CAACG,gBAAgB,CAAC,gBAAgB,CAAC,IACrCH,EAAE,CAACG,gBAAgB,CAAC,eAAe,CAAC,IACpCH,EAAE,CAACG,gBAAgB,CAAC,cAAc,CAAC,IACnCH,EAAE,CAACG,gBAAgB,CAAC,WAAW,CAAC,IAChC,MAAM;IACV,IAAID,EAAE,KAAK,MAAM,EAAE;MACf,IAAME,MAAM,GAAGF,EAAE,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAQ;MAC/D,IAAID,MAAM,EAAE;QACR,IAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CACpBD,IAAI,CAACE,KAAK,CAACL,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,GAAGG,IAAI,CAACG,EAAE,CAAC,CACrD;QACD,OAAOJ,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,GAAG,GAAGA,KAAK;;;IAG9C,OAAO,CAAC;GACX;EAEDvC,MAAA,CAAAM,SAAA,CAAAf,cAAc,GAAd;IACI,IAAM2B,QAAQ,GAAG,IAAI,CAACf,IAAI,CACrBgB,YAAY,CAAC,IAAI,CAAChB,IAAI,CAACa,KAAK,CAAC,CAC7BI,IAAI,CAAC,gBAAgB,CAAC,CACtBG,KAAK,EAAE,CACPF,GAAG,EAAE;IACV,IAAMuB,eAAe,GAAG,IAAI,CAACb,kBAAkB,CAACb,QAAQ,CAAC;IACzD,IAAI2B,UAAU,GAAG,gBAAgB;IACjC,IAAID,eAAe,KAAK,EAAE,IAAIA,eAAe,KAAK,GAAG,EAAE;MACnDC,UAAU,GAAG,cAAc;;IAE/B,IAAI,CAACjC,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAAC6B,UAAU,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,CAACjB,WAAW,EAAE;IAClB,IAAI,CAACE,aAAa,CAAC7D,QAAQ,CAACsB,cAAc,EAAE;MACxCA,cAAc,EAAE,IAAI,CAACqB,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAAC6B,UAAU;KACpE,CAAC;GACL;EAED7C,MAAA,CAAAM,SAAA,CAAAd,YAAY,GAAZ;IACI,IAAM0B,QAAQ,GAAG,IAAI,CAACf,IAAI,CACrBgB,YAAY,CAAC,IAAI,CAAChB,IAAI,CAACa,KAAK,CAAC,CAC7BI,IAAI,CAAC,gBAAgB,CAAC,CACtBG,KAAK,EAAE,CACPF,GAAG,EAAE;IACV,IAAMuB,eAAe,GAAG,IAAI,CAACb,kBAAkB,CAACb,QAAQ,CAAC;IACzD,IAAI2B,UAAU,GAAG,cAAc;IAC/B,IAAID,eAAe,KAAK,EAAE,IAAIA,eAAe,KAAK,GAAG,EAAE;MACnDC,UAAU,GAAG,gBAAgB;;IAEjC,IAAI,CAACjC,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAAC6B,UAAU,CAAC,IAAI,CAAC,CAAC;IAExD,IAAI,CAACjB,WAAW,EAAE;IAElB,IAAI,CAACE,aAAa,CAAC7D,QAAQ,CAACuB,YAAY,EAAE;MACtCA,YAAY,EAAE,IAAI,CAACoB,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC,CAAC6B,UAAU;KAClE,CAAC;GACL;EAED7C,MAAA,CAAAM,SAAA,CAAAwB,aAAa,GAAb,UAAcf,KAAa,EAAEE,MAAW;IAAxC,IAAAN,KAAA;IACImC,UAAU,CAAC;MACPnC,KAAI,CAACR,IAAI,CAACU,IAAI,CAACkC,OAAO,CAAChC,KAAK,EAAEE,MAAM,CAAC;KACxC,EAAE,IAAI,CAACb,QAAQ,CAACN,WAAW,GAAG,EAAE,CAAC;GACrC;EAEDE,MAAA,CAAAM,SAAA,CAAA0C,yBAAyB,GAAzB;IACI,IAAMC,WAAW,GAAG,IAAI,CAACrC,gBAAgB,CAAC,IAAI,CAACT,IAAI,CAACa,KAAK,CAAC;IAC1D,IAAMkC,SAAS,GAAGV,IAAI,CAACW,GAAG,CAACF,WAAW,CAACpD,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;IAC1D,IAAMuD,YAAY,GAAGH,WAAW,CAAC1D,cAAc,GAAG,CAAC;IACnD,IAAM8D,YAAY,GAAGJ,WAAW,CAACzD,YAAY,GAAG,CAAC;IACjD,OAAO0D,SAAS,IAAIE,YAAY,IAAIC,YAAY;GACnD;EAEDrD,MAAA,CAAAM,SAAA,CAAAgD,YAAY,GAAZ;IACI,IAAI,IAAI,CAACN,yBAAyB,EAAE,EAAE;MAClC,IAAI,CAAC7C,IAAI,CAACgB,YAAY,CAAC,IAAI,CAAChB,IAAI,CAACa,KAAK,CAAC,CAACS,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;;IAE7D,IAAI,CAACb,gBAAgB,GAAG,EAAE;GAC7B;EAEDZ,MAAA,CAAAM,SAAA,CAAAiD,OAAO,GAAP;;IAEI,IAAI,CAACpD,IAAI,CAACU,IAAI,CAAC2C,GAAG,CAAC,YAAY,CAAC;IAChC,IAAI,CAACrD,IAAI,CAACU,IAAI,CAAC2C,GAAG,CAAC,SAAS,CAAC;GAChC;EACL,OAAAxD,MAAC;AAAD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}